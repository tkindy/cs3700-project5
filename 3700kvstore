#!/usr/bin/python3

from enum import Enum
from json import dumps, loads
from select import select
from socket import AF_UNIX, SOCK_SEQPACKET, socket
from sys import argv

# Socket receive timeout, in seconds
RECV_TIMEOUT = 0.01
# Maximum number of bytes to receive at once
MAX_RECEIVE_BYTES = 2 ** 16

# Message types
GET = 'get'
PUT = 'put'
FAIL = 'fail'


class State(Enum):
    """The server state."""
    LEADER = 1
    CANDIDATE = 2
    FOLLOWER = 3


class KVStore(object):
    def __init__(self, my_id: str, replica_ids: list):
        self.my_id = my_id
        self.replica_ids = replica_ids

        self.sock = self.build_socket()

        self.state = State.FOLLOWER
        self.leader = 'FFFF'

        self.leader_handlers = {

        }

        self.candidate_handlers = {

        }

        self.follower_handlers = {

        }

    def build_socket(self):
        """Build the UNIX domain socket."""
        sock = socket(AF_UNIX, SOCK_SEQPACKET)
        sock.connect(self.my_id)

        return sock

    def run(self):
        """Run the key-value store."""
        while True:
            self.receive_message()

    def receive_message(self):
        """Receive and handle a message from the socket."""
        ready = select([self.sock], [], [], RECV_TIMEOUT)[0]

        if ready:
            msg_raw = self.sock.recv(MAX_RECEIVE_BYTES)

            if not msg_raw:
                return

            msg = loads(msg_raw.decode('utf-8'))
            msg_t = msg['type']

            if self.state is State.LEADER:
                self.leader_handlers[msg_t](msg)
            elif self.state is State.CANDIDATE:
                self.candidate_handlers[msg_t](msg)
            elif self.state is State.FOLLOWER:
                self.follower_handlers[msg_t](msg)
            else:
                raise RuntimeError('Invalid state: {}'.format(self.state))

    def fail_request(self, msg: dict):
        """Send a failed response to the requester."""
        self.send_message(self.build_base_response(msg, FAIL))

    def build_base_response(self, msg: dict, msg_type: str):
        """Build a response to the message."""
        resp = self.build_base_message(msg['src'], msg_type)
        resp['MID'] = msg['MID']
        return resp

    def build_base_message(self, dest: str, msg_type: str):
        """Build the base message."""
        return {
            'src': self.my_id,
            'dst': dest,
            'leader': self.leader,
            'type': msg_type
        }

    def send_message(self, msg: dict):
        """Send a message through the socket."""
        self.sock.send(dumps(msg).encode('utf-8'))


if __name__ == '__main__':
    KVStore(argv[1], argv[2:]).run()
