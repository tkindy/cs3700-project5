#!/usr/bin/python3

from json import dumps, loads
from random import choice
from select import select
from socket import AF_UNIX, SOCK_SEQPACKET, socket
from sys import argv
from time import time

# Timeout for the call to select, in seconds
SELECT_TIMEOUT = 0.1
# Maximum amount of data to receive from the socket, in bytes
MAX_BYTES = 2 ** 15


class KVStore(object):

    """The key-value store program."""

    def __init__(self, my_id: str, replica_ids: list):
        self.my_id = my_id
        self.replica_ids = replica_ids

        self.sock = self.build_socket()
        self.last_send = 0

    def build_socket(self):
        """Build the UNIX domain socket."""
        sock = socket(AF_UNIX, SOCK_SEQPACKET)
        sock.connect(self.my_id)

        return sock

    def run(self):
        """Run the key-value store."""
        while True:
            self.handle_message()
            self.send_noop()

    def handle_message(self):
        ready = select([self.sock], [], [], SELECT_TIMEOUT)[0]

        if ready:
            msg_raw = self.sock.recv(MAX_BYTES)

            if not msg_raw:
                return

            msg = loads(msg_raw.decode('utf-8'))

            if msg['type'] == 'get':
                self.handle_get(msg)
            elif msg['type'] == 'put':
                self.handle_put(msg)
            elif msg['type'] == 'noop':
                print('%s received a NOOP from %s' %
                      (msg['dst'], msg['src']))

    def handle_get(self, msg: dict):
        pass

    def handle_put(self, msg: dict):
        pass

    def send_noop(self):
        clock = time()
        if clock - self.last_send > 2:
            # Send a no-op message to a random peer every two seconds, just for fun
            # You definitely want to remove this from your implementation
            msg = {'src': self.my_id, 'dst': choice(
                self.replica_ids), 'leader': 'FFFF', 'type': 'noop'}
            self.sock.send(dumps(msg).encode('utf-8'))
            print('%s sending a NOOP to %s' % (msg['src'], msg['dst']))
            self.last_send = clock


if __name__ == '__main__':
    KVStore(argv[1], argv[2:]).run()
