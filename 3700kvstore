#!/usr/bin/python3

from json import dumps, loads
from select import select
from socket import AF_UNIX, SOCK_SEQPACKET, socket
from sys import argv

# Timeout for the call to select, in seconds
SELECT_TIMEOUT = 0.1
# Maximum amount of data to receive from the socket, in bytes
MAX_BYTES = 2 ** 15


class KVStore(object):

    """The key-value store program."""

    def __init__(self, my_id: str, replica_ids: list):
        self.my_id = my_id
        self.replica_ids = replica_ids

        self.sock = self.build_socket()
        self.leader = 'FFFF'

    def build_socket(self):
        """Build the UNIX domain socket."""
        sock = socket(AF_UNIX, SOCK_SEQPACKET)
        sock.connect(self.my_id)

        return sock

    def run(self):
        """Run the key-value store."""
        while True:
            self.handle_message()

    def handle_message(self):
        ready = select([self.sock], [], [], SELECT_TIMEOUT)[0]

        if ready:
            msg_raw = self.sock.recv(MAX_BYTES)

            if not msg_raw:
                return

            msg = loads(msg_raw.decode('utf-8'))

            {
                'get': self.handle_get,
                'put': self.handle_put
            }[msg['type']](msg)

    def handle_get(self, msg: dict):
        self.fail_request(msg)

    def handle_put(self, msg: dict):
        self.fail_request(msg)

    def fail_request(self, msg: dict):
        msg = {
            'src': self.my_id,
            'dst': msg['src'],
            'leader': self.leader,
            'type': 'fail',
            'MID': msg['MID']
        }
        self.send_message(msg)

    def send_message(self, msg: dict):
        """Send the message as JSON."""
        self.sock.send(dumps(msg).encode('utf-8'))


if __name__ == '__main__':
    KVStore(argv[1], argv[2:]).run()
