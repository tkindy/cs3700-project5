#!/usr/bin/python3

import sys
import socket
import select
import time
import json
import random


class KVStore(object):

    def __init__(self, my_id: str, replica_ids: list):
        self.my_id = my_id
        self.replica_ids = replica_ids

        self.sock = self.build_socket()

    def build_socket(self):
        """Build the UNIX domain socket."""
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        sock.connect(self.my_id)

        return sock

    def run(self):
        """Run the key-value store."""
        last = 0

        while True:
            ready = select.select([self.sock], [], [], 0.1)[0]

            if self.sock in ready:
                msg_raw = self.sock.recv(32768)

                if not msg_raw:
                    continue

                msg = json.loads(msg_raw)

                # For now, ignore get() and put() from clients
                if msg['type'] in ['get', 'put']:
                    pass

                # Handle noop messages. This may be removed from your final
                # implementation
                elif msg['type'] == 'noop':
                    print('%s received a NOOP from %s' %
                          (msg['dst'], msg['src']))

            clock = time.time()
            if clock - last > 2:
                # Send a no-op message to a random peer every two seconds, just for fun
                # You definitely want to remove this from your implementation
                msg = {'src': self.my_id, 'dst': random.choice(
                    self.replica_ids), 'leader': 'FFFF', 'type': 'noop'}
                self.sock.send(json.dumps(msg))
                print('%s sending a NOOP to %s' % (msg['src'], msg['dst']))
                last = clock

if __name__ == '__main__':
    KVStore(sys.argv[1], sys.argv[2:]).run()
